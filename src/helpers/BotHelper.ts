import Bot from "../bot/Bot.js";

import SetAdminMiddleware from "../middlewares/SetAdmin.js"
import BanMiddleware from "../middlewares/BanMiddleware.js"
import observeMiddleware from "../middlewares/ObserveMiddleware.js";

import reportScene from "../scenes/Report.js";
import readScene from "../scenes/ReadQR.js";
import createScene from "../scenes/CreateQR.js";

import viewReportScene from "../scenes/ViewReports.js";
import settingsScene from "../scenes/Settings.js";

import AdminHelper from "./AdminHelper.js";

class BotHelper {
    static setScenes(bot: Bot) {
        bot.setScene(reportScene, viewReportScene, settingsScene, readScene, createScene);
    }

    static setBotCommands(bot: Bot) {
        /**<<===USER===>> */
        bot.command('start', async(ctx) => {
            await ctx.api.reply(
                `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n` +
                `–ß—Ç–æ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:\n` +
                `üì∑ –ß—Ç–µ–Ω–∏–µ QR-–∫–æ–¥–æ–≤: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º, –∏ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n` +
                `üñ® –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å QR-–∫–æ–¥.\n\n` +
                `–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /help`,
                {
                    parse_mode: 'HTML'
                }
            );
        });
        bot.command('help', async(ctx) => {
            await ctx.api.reply(
                `–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n` +
                `/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n` +
                `/report - –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ.\n` +
                `/create - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥.\n` +
                `/read - –ü—Ä–æ—á–∏—Ç–∞—Ç—å QR-–∫–æ–¥.\n\n` +
                `<i>–í–µ–∑–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /leave –¥–ª—è –≤—ã—Ö–æ–¥–∞</i>`,
                {
                    parse_mode: 'HTML',
                }
            );
        });
        bot.command('report', async(ctx) => {
            await ctx.sceneWorker.enter('report');
        });
        bot.command('read', async(ctx) => {
            await ctx.sceneWorker.enter('read');
        });
        bot.command('create', async(ctx) => {
            await ctx.sceneWorker.enter('create');
        });

        /**<<===ADMIN===>> */
        bot.command('view_report', async(ctx) => {
            if(AdminHelper.isAdmin(ctx)) await ctx.sceneWorker.enter('viewReports');
        });
        bot.command('settings', async(ctx) => {
            if(AdminHelper.isAdmin(ctx)) await ctx.sceneWorker.enter('settings');
        });
        bot.command('ban', async (ctx, args) => { 
            if (AdminHelper.isAdmin(ctx)) {
                if (args!.length < 3) return await ctx.api.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ban');
        
                await AdminHelper.setBan(ctx, args![1], args!.slice(2).join(' '));
            }
        });        
        bot.command('unban', async (ctx, args) => { 
            if (AdminHelper.isAdmin(ctx)) {
                if (args!.length < 2) return await ctx.api.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–∞–Ω-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /unban');
        
                await AdminHelper.delBan(ctx, args![1]);
            }
        });      
    }

    static setMiddlewares(bot: Bot) {
        bot.use(observeMiddleware, SetAdminMiddleware, BanMiddleware);
    }
}

export default BotHelper