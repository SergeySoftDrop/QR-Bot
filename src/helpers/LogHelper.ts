import fs from 'fs';
import path from 'path';
import zlib from 'zlib'; 
import State from '../TypesAndInterfaces/Session.js';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class LogHelper {
    static conf = {
        path: {
            access: path.resolve(__dirname, '../../log/access.log'), 
            error: path.resolve(__dirname, '../../log/error.log')
        },
        maxSize: 1024 * 1024 * 250,
    };

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫.
     * @param {Error} error –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏.
     * @param {State} ctx
     */
    static async logError(error: Error, ctx: State | null = null): Promise<void> {
        const logText = 
            ctx  
            ? `\nfrom: ${JSON.stringify(ctx.data?.from)}\nmessage: ${error.message}\nname: ${error.name}\ncode: ${(error as any).code}\nlineNumber: ${(error as any).lineNumber}\ncolumnNumber: ${(error as any).columnNumber}\nfileName: ${(error as any).fileName}\nstack: ${error.stack}\n`
            : `\nfrom: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ\nmessage: ${error.message}\nname: ${error.name}\ncode: ${(error as any).code}\nlineNumber: ${(error as any).lineNumber}\ncolumnNumber: ${(error as any).columnNumber}\nfileName: ${(error as any).fileName}\nstack: ${error.stack}\n`;
        await this.writeToFile(this.conf.path.error, `${this.getTime()} ${logText}\n`);
        console.error('üòÆ' + logText); 
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫.
     * @param {string} logText –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
     */
    static async logErrorCustom(logText: string): Promise<void> {
        await this.writeToFile(this.conf.path.error, `${this.getTime()} ${logText}\n`);
        console.error('üòÆ' + logText); 
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ –≤ –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞.
     * @param {string} logText –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–µ.
     */
    static async logAccess(logText: string): Promise<void> {
        await this.writeToFile(this.conf.path.access, `${this.getTime()} ${logText}\n`);
    }

    /**
     * 
     * @param {String} pathToFile 
     * @param {String} text 
     */
    private static async writeToFile(pathToFile: string, text: string): Promise<void> {
        this.checkDirPath(pathToFile); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
        fs.appendFileSync(pathToFile, text); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    
        fs.stat(pathToFile, async (err, stats) => {
            if(err) return;
            if(stats.size >= this.conf.maxSize) {
                await this.zipFile(pathToFile);
                await this.clearFile(pathToFile);
            }
        });
    }    

    /**
     * 
     * @returns {String}
     */
    private static getTime(): string {
        const date = new Date();
        const year = date.getFullYear().toString().padStart(4, '0'); 
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0'); 
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');

        return `${year}.${month}.${day}:${hours}.${minutes}.${seconds}`;
    }

    /**
     * 
     * @param {String} pathToFile 
     */
    private static checkDirPath(pathToFile: string): void {
        if(!fs.existsSync(path.dirname(pathToFile))) fs.mkdirSync(path.dirname(pathToFile), { recursive: true });
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Gzip.
     * @param {string} pathToFile –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–∂–∞—Ç–∏—è.
     */
    static async zipFile(pathToFile: string): Promise<void> {
        return new Promise((resolve, reject) => {
            const input = fs.createReadStream(pathToFile);
            const output = fs.createWriteStream(`${pathToFile}.gz`);

            const gzip = zlib.createGzip();
            
            input.pipe(gzip).pipe(output);

            output.on('finish', () => {
                resolve();
            });

            output.on('error', (err) => {
                reject(err);
            });
        });
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª.
     * @param {string} pathToFile –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.
     */
    static async clearFile(pathToFile: string): Promise<void> {
        return new Promise((resolve, reject) => {
            fs.truncate(pathToFile, 0, (err) => {
                if (err) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
}

export default LogHelper;